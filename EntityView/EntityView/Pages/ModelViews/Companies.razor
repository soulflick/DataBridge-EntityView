@page "/companies"

@using EntityView.Data
@using System.Net.Http
@using Newtonsoft.Json
@using Data = EntityView.Services.DataService

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavManager

@code
{
    private async Task SetBack()
    {
        JS.InvokeAsync<bool>("setInnnerHTML", "BackButton", "<a href=\"/\">Home</a> /<a href=\"/company/0\">New</a>");
    }
}


<div class="page-header">Companies</div>

@if (_companies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form asp-page="./Index" method="get">
        <div class="form-actions no-color" style="margin-top:10px">
            <p>
                Find by name:
                <input type="text" name="SearchString" value="@Filter" />
                <input type="submit" value="Search" class="btn-default" />
            </p>
        </div>
    </form>

    <table class="table">
    </table>

    <p>
        <table class="std-table" cellpadding="0" cellspacing="0">
            <thead>
                <tr>
                    <th class="sort-th" @onclick="@(() => SortTable("CompanyName"))">Company Name</th>
                    <th class="sort-th" @onclick="@(() => SortTable("InternalName"))">Internal Name</th>
                    <th class="sort-th" @onclick="@(() => SortTable("Address"))">Address</th>
                    <th width="80" />
                </tr>
            </thead>
            <tbody>
                @foreach (var company in _companies)
                {
                    <tr>
                        <td><a href="company/@company.Id">@company.CompanyName</a></td>
                        <td>@company.InternalName</td>
                        <td>@company.Address</td>
                        <td><label class="link" @onclick="@(() => Delete(@company.Id))">Delete</label></td>
                    </tr>
                }
            </tbody>
        </table>
    </p>

    @code {

        void SubmitMe()
        {
        }
    }

    @code {

        [Parameter]
        public string Filter { get; set; }

        [Parameter]
        public string OrderColumn { get; set; }

        string ThisTableText { get; set; }

        public RenderFragment Fragment { get; set; }


        public List<Company> _companies { get; set; }

        private async void Delete(Guid id)
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure  you want to delete this record?");
            if (confirmed)
            {
                var response = await Http.DeleteAsync($"company/{id}");
            }

            Refresh();
        }

        protected override async Task OnInitializedAsync()
        {
            SetBack();

            Refresh();
        }

        void Refresh()
        {
            //var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
            //if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("ordercolumn", out var column))
            //{
            //    OrderColumn = column.ToString();
            //}

            _companies = Data.GetAll<Company>("companies");
            StateHasChanged();

        }

        private void SortTable(string propertyName)
        {
            EntityView.Creations.NetGrid.SortTable<Company>(_companies, propertyName, SortState);
        }

        private EntityView.Creations.SortState SortState = new EntityView.Creations.SortState();
    }
}